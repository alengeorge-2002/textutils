{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\React Full\\\\textutils\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea';\nimport Alert from './components/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setmode] = useState(\"light\");\n  const [greenMode, setGreenMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      showAlert(null);\n    }, 3000);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      console.log(\"dark\");\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#121e6de0\";\n      showAlert(\" Dark Mode Enabled\", \"success\");\n    } else {\n      console.log(\"light\");\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\" Light Mode Enabled\", \"warning\");\n    }\n  };\n  const toggleGreenMode = () => {\n    if (greenMode === \"light\") {\n      setGreenMode('green');\n      document.body.style.backgroundColor = \"#121e6de0\";\n      showAlert(\" Dark Mode Enabled\", \"success\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtils\",\n      about: \"About\",\n      mode: mode,\n      toggleMode: toggleMode,\n      toggleGreenMode: toggleGreenMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n      showAlert: showAlert,\n      heading: \"To Upper Case Converter\",\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"fZnukCb+aemNwI3K06O7IPJUozY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Navbar","TextArea","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setmode","greenMode","setGreenMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","console","log","document","body","style","backgroundColor","toggleGreenMode","children","title","about","fileName","_jsxFileName","lineNumber","columnNumber","heading","_c","$RefreshReg$"],"sources":["D:/Coding/React Full/textutils/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea';\nimport Alert from './components/Alert';\nfunction App() {\n  const [mode, setmode] = useState(\"light\")\n  const [greenMode, setGreenMode] = useState(\"light\")\n  const [alert, setAlert] = useState(null)\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      showAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode=()=>{\n  if (mode===\"light\") {\n    console.log(\"dark\")\n    setmode(\"dark\") \n    document.body.style.backgroundColor =\"#121e6de0\"\n    showAlert(\" Dark Mode Enabled\",\"success\")\n  }\n  else{\n    console.log(\"light\")\n    setmode(\"light\")\n    document.body.style.backgroundColor = \"white\"\n    showAlert(\" Light Mode Enabled\", \"warning\")\n  }\n}\n  const toggleGreenMode = () => {\n    if (greenMode === \"light\") {\n      setGreenMode('green')\n      document.body.style.backgroundColor = \"#121e6de0\"\n      showAlert(\" Dark Mode Enabled\", \"success\")\n    }\n  }\nreturn (\n    <>\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} toggleGreenMode={toggleGreenMode} />\n      <Alert alert={alert}/>\n      <TextArea showAlert={showAlert} heading=\"To Upper Case Converter\" mode={mode} />\n      {/* <About/> */}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB;AACA,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,OAAO,CAAC;EACnD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMgB,SAAS,GAACA,CAACC,OAAO,EAACC,IAAI,KAAG;IAC9BH,QAAQ,CAAC;MACPI,GAAG,EAACF,OAAO;MACXC,IAAI,EAACA;IACP,CAAC,CAAC;IACFE,UAAU,CAAC,MAAM;MACfJ,SAAS,CAAC,IAAI,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMK,UAAU,GAACA,CAAA,KAAI;IACrB,IAAIX,IAAI,KAAG,OAAO,EAAE;MAClBY,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBZ,OAAO,CAAC,MAAM,CAAC;MACfa,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAE,WAAW;MAChDX,SAAS,CAAC,oBAAoB,EAAC,SAAS,CAAC;IAC3C,CAAC,MACG;MACFM,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpBZ,OAAO,CAAC,OAAO,CAAC;MAChBa,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,OAAO;MAC7CX,SAAS,CAAC,qBAAqB,EAAE,SAAS,CAAC;IAC7C;EACF,CAAC;EACC,MAAMY,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIhB,SAAS,KAAK,OAAO,EAAE;MACzBC,YAAY,CAAC,OAAO,CAAC;MACrBW,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,WAAW;MACjDX,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC;IAC5C;EACF,CAAC;EACH,oBACIX,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA,CAACJ,MAAM;MAAC6B,KAAK,EAAC,WAAW;MAACC,KAAK,EAAC,OAAO;MAACrB,IAAI,EAAEA,IAAK;MAACW,UAAU,EAAEA,UAAW;MAACO,eAAe,EAAEA;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChH9B,OAAA,CAACF,KAAK;MAACW,KAAK,EAAEA;IAAM;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACtB9B,OAAA,CAACH,QAAQ;MAACc,SAAS,EAAEA,SAAU;MAACoB,OAAO,EAAC,yBAAyB;MAAC1B,IAAI,EAAEA;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAEhF,CAAC;AAEP;AAAC1B,EAAA,CA5CQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}